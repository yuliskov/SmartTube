name: Create Release

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0, v2.1.3, etc.
  workflow_dispatch:  # Allow manual trigger
    inputs:
      version:
        description: 'Release version (e.g., 30.19)'
        required: true
        type: string
      flavors:
        description: 'Flavors to build (comma-separated: beta,stable,orig,amazon,aptoide or "all")'
        required: false
        default: 'stable'
        type: string
      sign_apk:
        description: 'Sign APKs with release keystore'
        required: false
        default: false
        type: boolean

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up JDK 14
        uses: actions/setup-java@v4
        with:
          java-version: '14'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Decode and setup keystore
        if: github.event.inputs.sign_apk == 'true' || github.event_name == 'push'
        run: |
          if [ -n "${{ secrets.KEYSTORE_BASE64 }}" ]; then
            echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > ${{ github.workspace }}/release.keystore
            echo "KEYSTORE_FILE=${{ github.workspace }}/release.keystore" >> $GITHUB_ENV
            echo "Keystore decoded successfully"
          else
            echo "No keystore found, building unsigned APK"
          fi
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}

      - name: Determine flavors to build
        id: flavors
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            FLAVORS="${{ github.event.inputs.flavors }}"
          else
            FLAVORS="all"
          fi

          if [ "$FLAVORS" = "all" ]; then
            FLAVORS="beta,stable,orig,amazon,aptoide"
          fi

          echo "flavors=$FLAVORS" >> $GITHUB_OUTPUT
          echo "Building flavors: $FLAVORS"

      - name: Build Release APKs
        run: |
          IFS=',' read -ra FLAVOR_ARRAY <<< "${{ steps.flavors.outputs.flavors }}"

          for flavor in "${FLAVOR_ARRAY[@]}"; do
            flavor=$(echo "$flavor" | xargs)  # trim whitespace
            echo "Building flavor: st${flavor}"

            if [ -f "$KEYSTORE_FILE" ]; then
              echo "Building signed APK for st${flavor}"
              ./gradlew assembleSt${flavor}Release \
                -Pandroid.injected.signing.store.file=$KEYSTORE_FILE \
                -Pandroid.injected.signing.store.password="${{ secrets.KEYSTORE_PASSWORD }}" \
                -Pandroid.injected.signing.key.alias="${{ secrets.KEY_ALIAS }}" \
                -Pandroid.injected.signing.key.password="${{ secrets.KEY_PASSWORD }}"
            else
              echo "Building unsigned APK for st${flavor}"
              ./gradlew assembleSt${flavor}Release
            fi
          done
        env:
          JAVA_HOME: ${{ env.JAVA_HOME }}

      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/v}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT

      - name: Collect APK files
        run: |
          mkdir -p release-apks
          find smarttubetv/build/outputs/apk -name "*.apk" -exec cp {} release-apks/ \;
          ls -lh release-apks/

      - name: Generate checksums
        run: |
          cd release-apks
          sha256sum *.apk > checksums.txt
          cat checksums.txt

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: Release ${{ steps.version.outputs.version }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            release-apks/*.apk
            release-apks/checksums.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload APKs as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: smarttube-apks-${{ steps.version.outputs.version }}
          path: release-apks/*.apk
          retention-days: 30
